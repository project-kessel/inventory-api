syntax = "proto3";

package kessel.inventory.v1beta1.authz;

import "google/api/annotations.proto";
import "kessel/inventory/v1beta1/authz/common.proto";
import "buf/validate/validate.proto";

option go_package = "github.com/project-kessel/inventory-api/api/kessel/inventory/v1beta1/authz";
option java_multiple_files = true;
option java_package = "org.project_kessel.api.inventory.v1beta1.authz";

service KesselCheckService {
	// Checks for the existence of a single Relationship 
	// (a Relation between a Resource and a Subject or Subject Set).
	rpc CheckForView (CheckForViewRequest) returns (CheckForViewResponse) {
		option (google.api.http) = {
			post: "/api/inventory/v1beta1/authz/check"
			body: "*"
		};
	};
	
	rpc CheckForUpdate (CheckForUpdateRequest) returns (CheckForUpdateResponse) {
		option (google.api.http) = {
			post: "/api/inventory/v1beta1/authz/checkforupdate"
			body: "*"
		};
	};

	rpc CheckForCreate (CheckForCreateRequest) returns (CheckForCreateResponse) {
		option (google.api.http) = {
			post: "/api/inventory/v1beta1/authz/checkforcreate"
			body: "*"
		};
	};
}

message CheckForViewRequest {
	// Required parameters (from an authz perspective)
	// - resource type and id
	// - permission (cannot be derived from the type as a type may have multiple 'read' permissions. Ex: https://github.com/RedHatInsights/rbac-config/blob/master/configs/prod/schemas/src/notifications.ksl#L31)
	// - user (possibly derived from an identity token)
	ObjectReference parent = 1 [(buf.validate.field).required = true];
	string relation = 2 [(buf.validate.field).string.min_len = 1];
	SubjectReference subject = 3 [(buf.validate.field).required = true];
	// Consistency consistency = 4;
}

message CheckForViewResponse {
	enum Allowed {
		ALLOWED_UNSPECIFIED = 0;
		ALLOWED_TRUE = 1;
		ALLOWED_FALSE = 2;
		// e.g.  ALLOWED_CONDITIONAL = 3;
	}
	Allowed allowed = 1;
}

message CheckForUpdateRequest { // fully consistent
	// Required parameters (from an authz perspective)
	// - resource type and id
	// - permission (cannot be derived from type as types may have multiple edit permissions Ex: https://github.com/RedHatInsights/rbac-config/blob/master/configs/prod/schemas/src/notifications.ksl#L37)
	// - user (possibly derived from an identity token)
	ObjectReference parent = 1 [(buf.validate.field).required = true];
	string relation = 2 [(buf.validate.field).string.min_len = 1];
	SubjectReference subject = 3 [(buf.validate.field).required = true];
}

message CheckForUpdateResponse {
	enum Allowed {
		ALLOWED_UNSPECIFIED = 0;
		ALLOWED_TRUE = 1;
		ALLOWED_FALSE = 2;
		// e.g.  ALLOWED_CONDITIONAL = 3;
	}
	Allowed allowed = 1;
}

// may make sense to get away with just checkforview and checkforupdate.
message CheckForCreateRequest { // fully consistent & just create permission.
	// Required parameters (from an authz perspective)
	// 	- resource type (located in Metadata, could be discrete argument)
	// 		Alternatively: the workspace-level 'create' permission for the resource type. Note: this parameter is not normally part of the CreateResource call (but may need to be if this is rolled into CreateResource and it cannot be derived from the resource type)
	// 	- parent object type and id (typically a workspace, located in Metadata, could be discrete argument)
	// Note: may be part of CreateResource or separate depending on consistency algorithm requirements
	ObjectReference parent = 1 [(buf.validate.field).required = true];
	string create_permission = 2 [(buf.validate.field).string.min_len = 1];
	SubjectReference subject = 3 [(buf.validate.field).required = true];
}

message CheckForCreateResponse { // same response, diff implementation.
	enum Allowed {
		ALLOWED_UNSPECIFIED = 0;
		ALLOWED_TRUE = 1;
		ALLOWED_FALSE = 2;
		// e.g.  ALLOWED_CONDITIONAL = 3;
	}
	Allowed allowed = 1;
}