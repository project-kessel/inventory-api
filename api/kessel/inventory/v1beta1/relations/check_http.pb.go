// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             (unknown)
// source: kessel/inventory/v1beta1/relations/check.proto

package relations

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationKesselCheckServiceCheckForCreate = "/kessel.inventory.v1beta1.relations.KesselCheckService/CheckForCreate"
const OperationKesselCheckServiceCheckForUpdate = "/kessel.inventory.v1beta1.relations.KesselCheckService/CheckForUpdate"
const OperationKesselCheckServiceCheckForView = "/kessel.inventory.v1beta1.relations.KesselCheckService/CheckForView"

type KesselCheckServiceHTTPServer interface {
	CheckForCreate(context.Context, *CheckForCreateRequest) (*CheckForCreateResponse, error)
	CheckForUpdate(context.Context, *CheckForUpdateRequest) (*CheckForUpdateResponse, error)
	// CheckForView Checks for the existence of a single Relationship
	// (a Relation between a Resource and a Subject or Subject Set).
	CheckForView(context.Context, *CheckForViewRequest) (*CheckForViewResponse, error)
}

func RegisterKesselCheckServiceHTTPServer(s *http.Server, srv KesselCheckServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/inventory/v1beta1/relations/check", _KesselCheckService_CheckForView0_HTTP_Handler(srv))
	r.POST("/api/inventory/v1beta1/relations/checkforupdate", _KesselCheckService_CheckForUpdate0_HTTP_Handler(srv))
	r.POST("/api/inventory/v1beta1/relations/checkforcreate", _KesselCheckService_CheckForCreate0_HTTP_Handler(srv))
}

func _KesselCheckService_CheckForView0_HTTP_Handler(srv KesselCheckServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CheckForViewRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationKesselCheckServiceCheckForView)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CheckForView(ctx, req.(*CheckForViewRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CheckForViewResponse)
		return ctx.Result(200, reply)
	}
}

func _KesselCheckService_CheckForUpdate0_HTTP_Handler(srv KesselCheckServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CheckForUpdateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationKesselCheckServiceCheckForUpdate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CheckForUpdate(ctx, req.(*CheckForUpdateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CheckForUpdateResponse)
		return ctx.Result(200, reply)
	}
}

func _KesselCheckService_CheckForCreate0_HTTP_Handler(srv KesselCheckServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CheckForCreateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationKesselCheckServiceCheckForCreate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CheckForCreate(ctx, req.(*CheckForCreateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CheckForCreateResponse)
		return ctx.Result(200, reply)
	}
}

type KesselCheckServiceHTTPClient interface {
	CheckForCreate(ctx context.Context, req *CheckForCreateRequest, opts ...http.CallOption) (rsp *CheckForCreateResponse, err error)
	CheckForUpdate(ctx context.Context, req *CheckForUpdateRequest, opts ...http.CallOption) (rsp *CheckForUpdateResponse, err error)
	CheckForView(ctx context.Context, req *CheckForViewRequest, opts ...http.CallOption) (rsp *CheckForViewResponse, err error)
}

type KesselCheckServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewKesselCheckServiceHTTPClient(client *http.Client) KesselCheckServiceHTTPClient {
	return &KesselCheckServiceHTTPClientImpl{client}
}

func (c *KesselCheckServiceHTTPClientImpl) CheckForCreate(ctx context.Context, in *CheckForCreateRequest, opts ...http.CallOption) (*CheckForCreateResponse, error) {
	var out CheckForCreateResponse
	pattern := "/api/inventory/v1beta1/relations/checkforcreate"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationKesselCheckServiceCheckForCreate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *KesselCheckServiceHTTPClientImpl) CheckForUpdate(ctx context.Context, in *CheckForUpdateRequest, opts ...http.CallOption) (*CheckForUpdateResponse, error) {
	var out CheckForUpdateResponse
	pattern := "/api/inventory/v1beta1/relations/checkforupdate"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationKesselCheckServiceCheckForUpdate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *KesselCheckServiceHTTPClientImpl) CheckForView(ctx context.Context, in *CheckForViewRequest, opts ...http.CallOption) (*CheckForViewResponse, error) {
	var out CheckForViewResponse
	pattern := "/api/inventory/v1beta1/relations/check"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationKesselCheckServiceCheckForView))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
