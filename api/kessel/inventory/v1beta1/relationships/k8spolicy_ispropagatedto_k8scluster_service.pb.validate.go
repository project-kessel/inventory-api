// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: kessel/inventory/v1beta1/relationships/k8spolicy_ispropagatedto_k8scluster_service.proto

package relationships

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on
// CreateK8SPolicyIsPropagatedToK8SClusterRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateK8SPolicyIsPropagatedToK8SClusterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateK8SPolicyIsPropagatedToK8SClusterRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// CreateK8SPolicyIsPropagatedToK8SClusterRequestMultiError, or nil if none found.
func (m *CreateK8SPolicyIsPropagatedToK8SClusterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateK8SPolicyIsPropagatedToK8SClusterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPolicyRelationship()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateK8SPolicyIsPropagatedToK8SClusterRequestValidationError{
					field:  "PolicyRelationship",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateK8SPolicyIsPropagatedToK8SClusterRequestValidationError{
					field:  "PolicyRelationship",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPolicyRelationship()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateK8SPolicyIsPropagatedToK8SClusterRequestValidationError{
				field:  "PolicyRelationship",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateK8SPolicyIsPropagatedToK8SClusterRequestMultiError(errors)
	}

	return nil
}

// CreateK8SPolicyIsPropagatedToK8SClusterRequestMultiError is an error
// wrapping multiple validation errors returned by
// CreateK8SPolicyIsPropagatedToK8SClusterRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateK8SPolicyIsPropagatedToK8SClusterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateK8SPolicyIsPropagatedToK8SClusterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateK8SPolicyIsPropagatedToK8SClusterRequestMultiError) AllErrors() []error { return m }

// CreateK8SPolicyIsPropagatedToK8SClusterRequestValidationError is the
// validation error returned by
// CreateK8SPolicyIsPropagatedToK8SClusterRequest.Validate if the designated
// constraints aren't met.
type CreateK8SPolicyIsPropagatedToK8SClusterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateK8SPolicyIsPropagatedToK8SClusterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateK8SPolicyIsPropagatedToK8SClusterRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e CreateK8SPolicyIsPropagatedToK8SClusterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateK8SPolicyIsPropagatedToK8SClusterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateK8SPolicyIsPropagatedToK8SClusterRequestValidationError) ErrorName() string {
	return "CreateK8SPolicyIsPropagatedToK8SClusterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateK8SPolicyIsPropagatedToK8SClusterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateK8SPolicyIsPropagatedToK8SClusterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateK8SPolicyIsPropagatedToK8SClusterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateK8SPolicyIsPropagatedToK8SClusterRequestValidationError{}

// Validate checks the field values on
// CreateK8SPolicyIsPropagatedToK8SClusterResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateK8SPolicyIsPropagatedToK8SClusterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateK8SPolicyIsPropagatedToK8SClusterResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// CreateK8SPolicyIsPropagatedToK8SClusterResponseMultiError, or nil if none found.
func (m *CreateK8SPolicyIsPropagatedToK8SClusterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateK8SPolicyIsPropagatedToK8SClusterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateK8SPolicyIsPropagatedToK8SClusterResponseMultiError(errors)
	}

	return nil
}

// CreateK8SPolicyIsPropagatedToK8SClusterResponseMultiError is an error
// wrapping multiple validation errors returned by
// CreateK8SPolicyIsPropagatedToK8SClusterResponse.ValidateAll() if the
// designated constraints aren't met.
type CreateK8SPolicyIsPropagatedToK8SClusterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateK8SPolicyIsPropagatedToK8SClusterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateK8SPolicyIsPropagatedToK8SClusterResponseMultiError) AllErrors() []error { return m }

// CreateK8SPolicyIsPropagatedToK8SClusterResponseValidationError is the
// validation error returned by
// CreateK8SPolicyIsPropagatedToK8SClusterResponse.Validate if the designated
// constraints aren't met.
type CreateK8SPolicyIsPropagatedToK8SClusterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateK8SPolicyIsPropagatedToK8SClusterResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e CreateK8SPolicyIsPropagatedToK8SClusterResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e CreateK8SPolicyIsPropagatedToK8SClusterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateK8SPolicyIsPropagatedToK8SClusterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateK8SPolicyIsPropagatedToK8SClusterResponseValidationError) ErrorName() string {
	return "CreateK8SPolicyIsPropagatedToK8SClusterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateK8SPolicyIsPropagatedToK8SClusterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateK8SPolicyIsPropagatedToK8SClusterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateK8SPolicyIsPropagatedToK8SClusterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateK8SPolicyIsPropagatedToK8SClusterResponseValidationError{}

// Validate checks the field values on UpdateResourceRelationshipByUrnHsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateResourceRelationshipByUrnHsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateResourceRelationshipByUrnHsRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// UpdateResourceRelationshipByUrnHsRequestMultiError, or nil if none found.
func (m *UpdateResourceRelationshipByUrnHsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateResourceRelationshipByUrnHsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResources()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateResourceRelationshipByUrnHsRequestValidationError{
					field:  "Resources",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateResourceRelationshipByUrnHsRequestValidationError{
					field:  "Resources",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResources()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateResourceRelationshipByUrnHsRequestValidationError{
				field:  "Resources",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetK8SpolicyIspropagatedtoK8Scluster()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateResourceRelationshipByUrnHsRequestValidationError{
					field:  "K8SpolicyIspropagatedtoK8Scluster",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateResourceRelationshipByUrnHsRequestValidationError{
					field:  "K8SpolicyIspropagatedtoK8Scluster",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetK8SpolicyIspropagatedtoK8Scluster()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateResourceRelationshipByUrnHsRequestValidationError{
				field:  "K8SpolicyIspropagatedtoK8Scluster",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateResourceRelationshipByUrnHsRequestMultiError(errors)
	}

	return nil
}

// UpdateResourceRelationshipByUrnHsRequestMultiError is an error wrapping
// multiple validation errors returned by
// UpdateResourceRelationshipByUrnHsRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateResourceRelationshipByUrnHsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateResourceRelationshipByUrnHsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateResourceRelationshipByUrnHsRequestMultiError) AllErrors() []error { return m }

// UpdateResourceRelationshipByUrnHsRequestValidationError is the validation
// error returned by UpdateResourceRelationshipByUrnHsRequest.Validate if the
// designated constraints aren't met.
type UpdateResourceRelationshipByUrnHsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateResourceRelationshipByUrnHsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateResourceRelationshipByUrnHsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateResourceRelationshipByUrnHsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateResourceRelationshipByUrnHsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateResourceRelationshipByUrnHsRequestValidationError) ErrorName() string {
	return "UpdateResourceRelationshipByUrnHsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateResourceRelationshipByUrnHsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateResourceRelationshipByUrnHsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateResourceRelationshipByUrnHsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateResourceRelationshipByUrnHsRequestValidationError{}

// Validate checks the field values on
// UpdateResourceRelationshipByUrnHsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateResourceRelationshipByUrnHsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateResourceRelationshipByUrnHsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// UpdateResourceRelationshipByUrnHsResponseMultiError, or nil if none found.
func (m *UpdateResourceRelationshipByUrnHsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateResourceRelationshipByUrnHsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateResourceRelationshipByUrnHsResponseMultiError(errors)
	}

	return nil
}

// UpdateResourceRelationshipByUrnHsResponseMultiError is an error wrapping
// multiple validation errors returned by
// UpdateResourceRelationshipByUrnHsResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateResourceRelationshipByUrnHsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateResourceRelationshipByUrnHsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateResourceRelationshipByUrnHsResponseMultiError) AllErrors() []error { return m }

// UpdateResourceRelationshipByUrnHsResponseValidationError is the validation
// error returned by UpdateResourceRelationshipByUrnHsResponse.Validate if the
// designated constraints aren't met.
type UpdateResourceRelationshipByUrnHsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateResourceRelationshipByUrnHsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateResourceRelationshipByUrnHsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateResourceRelationshipByUrnHsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateResourceRelationshipByUrnHsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateResourceRelationshipByUrnHsResponseValidationError) ErrorName() string {
	return "UpdateResourceRelationshipByUrnHsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateResourceRelationshipByUrnHsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateResourceRelationshipByUrnHsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateResourceRelationshipByUrnHsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateResourceRelationshipByUrnHsResponseValidationError{}

// Validate checks the field values on DeleteResourceRelationshipByUrnRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DeleteResourceRelationshipByUrnRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// DeleteResourceRelationshipByUrnRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// DeleteResourceRelationshipByUrnRequestMultiError, or nil if none found.
func (m *DeleteResourceRelationshipByUrnRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteResourceRelationshipByUrnRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResources()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteResourceRelationshipByUrnRequestValidationError{
					field:  "Resources",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteResourceRelationshipByUrnRequestValidationError{
					field:  "Resources",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResources()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteResourceRelationshipByUrnRequestValidationError{
				field:  "Resources",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteResourceRelationshipByUrnRequestMultiError(errors)
	}

	return nil
}

// DeleteResourceRelationshipByUrnRequestMultiError is an error wrapping
// multiple validation errors returned by
// DeleteResourceRelationshipByUrnRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteResourceRelationshipByUrnRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteResourceRelationshipByUrnRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteResourceRelationshipByUrnRequestMultiError) AllErrors() []error { return m }

// DeleteResourceRelationshipByUrnRequestValidationError is the validation
// error returned by DeleteResourceRelationshipByUrnRequest.Validate if the
// designated constraints aren't met.
type DeleteResourceRelationshipByUrnRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteResourceRelationshipByUrnRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteResourceRelationshipByUrnRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteResourceRelationshipByUrnRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteResourceRelationshipByUrnRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteResourceRelationshipByUrnRequestValidationError) ErrorName() string {
	return "DeleteResourceRelationshipByUrnRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteResourceRelationshipByUrnRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteResourceRelationshipByUrnRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteResourceRelationshipByUrnRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteResourceRelationshipByUrnRequestValidationError{}

// Validate checks the field values on DeleteResourceRelationshipByUrnResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DeleteResourceRelationshipByUrnResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// DeleteResourceRelationshipByUrnResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// DeleteResourceRelationshipByUrnResponseMultiError, or nil if none found.
func (m *DeleteResourceRelationshipByUrnResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteResourceRelationshipByUrnResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteResourceRelationshipByUrnResponseMultiError(errors)
	}

	return nil
}

// DeleteResourceRelationshipByUrnResponseMultiError is an error wrapping
// multiple validation errors returned by
// DeleteResourceRelationshipByUrnResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteResourceRelationshipByUrnResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteResourceRelationshipByUrnResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteResourceRelationshipByUrnResponseMultiError) AllErrors() []error { return m }

// DeleteResourceRelationshipByUrnResponseValidationError is the validation
// error returned by DeleteResourceRelationshipByUrnResponse.Validate if the
// designated constraints aren't met.
type DeleteResourceRelationshipByUrnResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteResourceRelationshipByUrnResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteResourceRelationshipByUrnResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteResourceRelationshipByUrnResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteResourceRelationshipByUrnResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteResourceRelationshipByUrnResponseValidationError) ErrorName() string {
	return "DeleteResourceRelationshipByUrnResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteResourceRelationshipByUrnResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteResourceRelationshipByUrnResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteResourceRelationshipByUrnResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteResourceRelationshipByUrnResponseValidationError{}
