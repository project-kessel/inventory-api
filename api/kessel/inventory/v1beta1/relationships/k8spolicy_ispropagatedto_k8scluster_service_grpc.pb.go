// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: kessel/inventory/v1beta1/relationships/k8spolicy_ispropagatedto_k8scluster_service.proto

package relationships

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	KesselK8SPolicyIsPropagatedToK8SClusterService_CreateK8SPolicyIsPropagatedToK8SCluster_FullMethodName = "/kessel.inventory.v1beta1.relationships.KesselK8SPolicyIsPropagatedToK8SClusterService/CreateK8SPolicyIsPropagatedToK8SCluster"
	KesselK8SPolicyIsPropagatedToK8SClusterService_UpdateK8SPolicyIsPropagatedToK8SCluster_FullMethodName = "/kessel.inventory.v1beta1.relationships.KesselK8SPolicyIsPropagatedToK8SClusterService/UpdateK8SPolicyIsPropagatedToK8SCluster"
	KesselK8SPolicyIsPropagatedToK8SClusterService_DeleteK8SPolicyIsPropagatedToK8SCluster_FullMethodName = "/kessel.inventory.v1beta1.relationships.KesselK8SPolicyIsPropagatedToK8SClusterService/DeleteK8SPolicyIsPropagatedToK8SCluster"
)

// KesselK8SPolicyIsPropagatedToK8SClusterServiceClient is the client API for KesselK8SPolicyIsPropagatedToK8SClusterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KesselK8SPolicyIsPropagatedToK8SClusterServiceClient interface {
	CreateK8SPolicyIsPropagatedToK8SCluster(ctx context.Context, in *CreateK8SPolicyIsPropagatedToK8SClusterRequest, opts ...grpc.CallOption) (*CreateK8SPolicyIsPropagatedToK8SClusterResponse, error)
	UpdateK8SPolicyIsPropagatedToK8SCluster(ctx context.Context, in *UpdateK8SPolicyIsPropagatedToK8SClusterRequest, opts ...grpc.CallOption) (*UpdateK8SPolicyIsPropagatedToK8SClusterResponse, error)
	DeleteK8SPolicyIsPropagatedToK8SCluster(ctx context.Context, in *DeleteK8SPolicyIsPropagatedToK8SClusterRequest, opts ...grpc.CallOption) (*DeleteK8SPolicyIsPropagatedToK8SClusterResponse, error)
}

type kesselK8SPolicyIsPropagatedToK8SClusterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKesselK8SPolicyIsPropagatedToK8SClusterServiceClient(cc grpc.ClientConnInterface) KesselK8SPolicyIsPropagatedToK8SClusterServiceClient {
	return &kesselK8SPolicyIsPropagatedToK8SClusterServiceClient{cc}
}

func (c *kesselK8SPolicyIsPropagatedToK8SClusterServiceClient) CreateK8SPolicyIsPropagatedToK8SCluster(ctx context.Context, in *CreateK8SPolicyIsPropagatedToK8SClusterRequest, opts ...grpc.CallOption) (*CreateK8SPolicyIsPropagatedToK8SClusterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateK8SPolicyIsPropagatedToK8SClusterResponse)
	err := c.cc.Invoke(ctx, KesselK8SPolicyIsPropagatedToK8SClusterService_CreateK8SPolicyIsPropagatedToK8SCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kesselK8SPolicyIsPropagatedToK8SClusterServiceClient) UpdateK8SPolicyIsPropagatedToK8SCluster(ctx context.Context, in *UpdateK8SPolicyIsPropagatedToK8SClusterRequest, opts ...grpc.CallOption) (*UpdateK8SPolicyIsPropagatedToK8SClusterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateK8SPolicyIsPropagatedToK8SClusterResponse)
	err := c.cc.Invoke(ctx, KesselK8SPolicyIsPropagatedToK8SClusterService_UpdateK8SPolicyIsPropagatedToK8SCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kesselK8SPolicyIsPropagatedToK8SClusterServiceClient) DeleteK8SPolicyIsPropagatedToK8SCluster(ctx context.Context, in *DeleteK8SPolicyIsPropagatedToK8SClusterRequest, opts ...grpc.CallOption) (*DeleteK8SPolicyIsPropagatedToK8SClusterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteK8SPolicyIsPropagatedToK8SClusterResponse)
	err := c.cc.Invoke(ctx, KesselK8SPolicyIsPropagatedToK8SClusterService_DeleteK8SPolicyIsPropagatedToK8SCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KesselK8SPolicyIsPropagatedToK8SClusterServiceServer is the server API for KesselK8SPolicyIsPropagatedToK8SClusterService service.
// All implementations must embed UnimplementedKesselK8SPolicyIsPropagatedToK8SClusterServiceServer
// for forward compatibility.
type KesselK8SPolicyIsPropagatedToK8SClusterServiceServer interface {
	CreateK8SPolicyIsPropagatedToK8SCluster(context.Context, *CreateK8SPolicyIsPropagatedToK8SClusterRequest) (*CreateK8SPolicyIsPropagatedToK8SClusterResponse, error)
	UpdateK8SPolicyIsPropagatedToK8SCluster(context.Context, *UpdateK8SPolicyIsPropagatedToK8SClusterRequest) (*UpdateK8SPolicyIsPropagatedToK8SClusterResponse, error)
	DeleteK8SPolicyIsPropagatedToK8SCluster(context.Context, *DeleteK8SPolicyIsPropagatedToK8SClusterRequest) (*DeleteK8SPolicyIsPropagatedToK8SClusterResponse, error)
	mustEmbedUnimplementedKesselK8SPolicyIsPropagatedToK8SClusterServiceServer()
}

// UnimplementedKesselK8SPolicyIsPropagatedToK8SClusterServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKesselK8SPolicyIsPropagatedToK8SClusterServiceServer struct{}

func (UnimplementedKesselK8SPolicyIsPropagatedToK8SClusterServiceServer) CreateK8SPolicyIsPropagatedToK8SCluster(context.Context, *CreateK8SPolicyIsPropagatedToK8SClusterRequest) (*CreateK8SPolicyIsPropagatedToK8SClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateK8SPolicyIsPropagatedToK8SCluster not implemented")
}
func (UnimplementedKesselK8SPolicyIsPropagatedToK8SClusterServiceServer) UpdateK8SPolicyIsPropagatedToK8SCluster(context.Context, *UpdateK8SPolicyIsPropagatedToK8SClusterRequest) (*UpdateK8SPolicyIsPropagatedToK8SClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateK8SPolicyIsPropagatedToK8SCluster not implemented")
}
func (UnimplementedKesselK8SPolicyIsPropagatedToK8SClusterServiceServer) DeleteK8SPolicyIsPropagatedToK8SCluster(context.Context, *DeleteK8SPolicyIsPropagatedToK8SClusterRequest) (*DeleteK8SPolicyIsPropagatedToK8SClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteK8SPolicyIsPropagatedToK8SCluster not implemented")
}
func (UnimplementedKesselK8SPolicyIsPropagatedToK8SClusterServiceServer) mustEmbedUnimplementedKesselK8SPolicyIsPropagatedToK8SClusterServiceServer() {
}
func (UnimplementedKesselK8SPolicyIsPropagatedToK8SClusterServiceServer) testEmbeddedByValue() {}

// UnsafeKesselK8SPolicyIsPropagatedToK8SClusterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KesselK8SPolicyIsPropagatedToK8SClusterServiceServer will
// result in compilation errors.
type UnsafeKesselK8SPolicyIsPropagatedToK8SClusterServiceServer interface {
	mustEmbedUnimplementedKesselK8SPolicyIsPropagatedToK8SClusterServiceServer()
}

func RegisterKesselK8SPolicyIsPropagatedToK8SClusterServiceServer(s grpc.ServiceRegistrar, srv KesselK8SPolicyIsPropagatedToK8SClusterServiceServer) {
	// If the following call pancis, it indicates UnimplementedKesselK8SPolicyIsPropagatedToK8SClusterServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&KesselK8SPolicyIsPropagatedToK8SClusterService_ServiceDesc, srv)
}

func _KesselK8SPolicyIsPropagatedToK8SClusterService_CreateK8SPolicyIsPropagatedToK8SCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateK8SPolicyIsPropagatedToK8SClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KesselK8SPolicyIsPropagatedToK8SClusterServiceServer).CreateK8SPolicyIsPropagatedToK8SCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KesselK8SPolicyIsPropagatedToK8SClusterService_CreateK8SPolicyIsPropagatedToK8SCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KesselK8SPolicyIsPropagatedToK8SClusterServiceServer).CreateK8SPolicyIsPropagatedToK8SCluster(ctx, req.(*CreateK8SPolicyIsPropagatedToK8SClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KesselK8SPolicyIsPropagatedToK8SClusterService_UpdateK8SPolicyIsPropagatedToK8SCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateK8SPolicyIsPropagatedToK8SClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KesselK8SPolicyIsPropagatedToK8SClusterServiceServer).UpdateK8SPolicyIsPropagatedToK8SCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KesselK8SPolicyIsPropagatedToK8SClusterService_UpdateK8SPolicyIsPropagatedToK8SCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KesselK8SPolicyIsPropagatedToK8SClusterServiceServer).UpdateK8SPolicyIsPropagatedToK8SCluster(ctx, req.(*UpdateK8SPolicyIsPropagatedToK8SClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KesselK8SPolicyIsPropagatedToK8SClusterService_DeleteK8SPolicyIsPropagatedToK8SCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteK8SPolicyIsPropagatedToK8SClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KesselK8SPolicyIsPropagatedToK8SClusterServiceServer).DeleteK8SPolicyIsPropagatedToK8SCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KesselK8SPolicyIsPropagatedToK8SClusterService_DeleteK8SPolicyIsPropagatedToK8SCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KesselK8SPolicyIsPropagatedToK8SClusterServiceServer).DeleteK8SPolicyIsPropagatedToK8SCluster(ctx, req.(*DeleteK8SPolicyIsPropagatedToK8SClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KesselK8SPolicyIsPropagatedToK8SClusterService_ServiceDesc is the grpc.ServiceDesc for KesselK8SPolicyIsPropagatedToK8SClusterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KesselK8SPolicyIsPropagatedToK8SClusterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kessel.inventory.v1beta1.relationships.KesselK8SPolicyIsPropagatedToK8SClusterService",
	HandlerType: (*KesselK8SPolicyIsPropagatedToK8SClusterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateK8SPolicyIsPropagatedToK8SCluster",
			Handler:    _KesselK8SPolicyIsPropagatedToK8SClusterService_CreateK8SPolicyIsPropagatedToK8SCluster_Handler,
		},
		{
			MethodName: "UpdateK8SPolicyIsPropagatedToK8SCluster",
			Handler:    _KesselK8SPolicyIsPropagatedToK8SClusterService_UpdateK8SPolicyIsPropagatedToK8SCluster_Handler,
		},
		{
			MethodName: "DeleteK8SPolicyIsPropagatedToK8SCluster",
			Handler:    _KesselK8SPolicyIsPropagatedToK8SClusterService_DeleteK8SPolicyIsPropagatedToK8SCluster_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kessel/inventory/v1beta1/relationships/k8spolicy_ispropagatedto_k8scluster_service.proto",
}
