// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             (unknown)
// source: kessel/inventory/v1beta1/relationships/k8spolicy_ispropagatedto_k8scluster_service.proto

package relationships

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationKesselK8SPolicyIsPropagatedToK8SClusterServiceCreateK8SPolicyIsPropagatedToK8SCluster = "/kessel.inventory.v1beta1.relationships.KesselK8SPolicyIsPropagatedToK8SClusterService/CreateK8SPolicyIsPropagatedToK8SCluster"
const OperationKesselK8SPolicyIsPropagatedToK8SClusterServiceDeleteResourceRelationshipByUrn = "/kessel.inventory.v1beta1.relationships.KesselK8SPolicyIsPropagatedToK8SClusterService/DeleteResourceRelationshipByUrn"
const OperationKesselK8SPolicyIsPropagatedToK8SClusterServiceUpdateResourceRelationshipByUrnHs = "/kessel.inventory.v1beta1.relationships.KesselK8SPolicyIsPropagatedToK8SClusterService/UpdateResourceRelationshipByUrnHs"

type KesselK8SPolicyIsPropagatedToK8SClusterServiceHTTPServer interface {
	CreateK8SPolicyIsPropagatedToK8SCluster(context.Context, *CreateK8SPolicyIsPropagatedToK8SClusterRequest) (*CreateK8SPolicyIsPropagatedToK8SClusterResponse, error)
	DeleteResourceRelationshipByUrn(context.Context, *DeleteResourceRelationshipByUrnRequest) (*DeleteResourceRelationshipByUrnResponse, error)
	UpdateResourceRelationshipByUrnHs(context.Context, *UpdateResourceRelationshipByUrnHsRequest) (*UpdateResourceRelationshipByUrnHsResponse, error)
}

func RegisterKesselK8SPolicyIsPropagatedToK8SClusterServiceHTTPServer(s *http.Server, srv KesselK8SPolicyIsPropagatedToK8SClusterServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/inventory/v1beta1/resource-relationships/k8s-policy.is-propagated.to-k8s-cluster", _KesselK8SPolicyIsPropagatedToK8SClusterService_CreateK8SPolicyIsPropagatedToK8SCluster0_HTTP_Handler(srv))
	r.PUT("/api/inventory/v1beta1/resource-relationships/k8s-policy.is-propagated.to-k8s-cluster", _KesselK8SPolicyIsPropagatedToK8SClusterService_UpdateResourceRelationshipByUrnHs0_HTTP_Handler(srv))
	r.DELETE("/api/inventory/v1beta1/resource-relationships/k8s-policy.is-propagated.to-k8s-cluster", _KesselK8SPolicyIsPropagatedToK8SClusterService_DeleteResourceRelationshipByUrn0_HTTP_Handler(srv))
}

func _KesselK8SPolicyIsPropagatedToK8SClusterService_CreateK8SPolicyIsPropagatedToK8SCluster0_HTTP_Handler(srv KesselK8SPolicyIsPropagatedToK8SClusterServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateK8SPolicyIsPropagatedToK8SClusterRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationKesselK8SPolicyIsPropagatedToK8SClusterServiceCreateK8SPolicyIsPropagatedToK8SCluster)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateK8SPolicyIsPropagatedToK8SCluster(ctx, req.(*CreateK8SPolicyIsPropagatedToK8SClusterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateK8SPolicyIsPropagatedToK8SClusterResponse)
		return ctx.Result(200, reply)
	}
}

func _KesselK8SPolicyIsPropagatedToK8SClusterService_UpdateResourceRelationshipByUrnHs0_HTTP_Handler(srv KesselK8SPolicyIsPropagatedToK8SClusterServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateResourceRelationshipByUrnHsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationKesselK8SPolicyIsPropagatedToK8SClusterServiceUpdateResourceRelationshipByUrnHs)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateResourceRelationshipByUrnHs(ctx, req.(*UpdateResourceRelationshipByUrnHsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateResourceRelationshipByUrnHsResponse)
		return ctx.Result(200, reply)
	}
}

func _KesselK8SPolicyIsPropagatedToK8SClusterService_DeleteResourceRelationshipByUrn0_HTTP_Handler(srv KesselK8SPolicyIsPropagatedToK8SClusterServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteResourceRelationshipByUrnRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationKesselK8SPolicyIsPropagatedToK8SClusterServiceDeleteResourceRelationshipByUrn)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteResourceRelationshipByUrn(ctx, req.(*DeleteResourceRelationshipByUrnRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteResourceRelationshipByUrnResponse)
		return ctx.Result(200, reply)
	}
}

type KesselK8SPolicyIsPropagatedToK8SClusterServiceHTTPClient interface {
	CreateK8SPolicyIsPropagatedToK8SCluster(ctx context.Context, req *CreateK8SPolicyIsPropagatedToK8SClusterRequest, opts ...http.CallOption) (rsp *CreateK8SPolicyIsPropagatedToK8SClusterResponse, err error)
	DeleteResourceRelationshipByUrn(ctx context.Context, req *DeleteResourceRelationshipByUrnRequest, opts ...http.CallOption) (rsp *DeleteResourceRelationshipByUrnResponse, err error)
	UpdateResourceRelationshipByUrnHs(ctx context.Context, req *UpdateResourceRelationshipByUrnHsRequest, opts ...http.CallOption) (rsp *UpdateResourceRelationshipByUrnHsResponse, err error)
}

type KesselK8SPolicyIsPropagatedToK8SClusterServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewKesselK8SPolicyIsPropagatedToK8SClusterServiceHTTPClient(client *http.Client) KesselK8SPolicyIsPropagatedToK8SClusterServiceHTTPClient {
	return &KesselK8SPolicyIsPropagatedToK8SClusterServiceHTTPClientImpl{client}
}

func (c *KesselK8SPolicyIsPropagatedToK8SClusterServiceHTTPClientImpl) CreateK8SPolicyIsPropagatedToK8SCluster(ctx context.Context, in *CreateK8SPolicyIsPropagatedToK8SClusterRequest, opts ...http.CallOption) (*CreateK8SPolicyIsPropagatedToK8SClusterResponse, error) {
	var out CreateK8SPolicyIsPropagatedToK8SClusterResponse
	pattern := "/api/inventory/v1beta1/resource-relationships/k8s-policy.is-propagated.to-k8s-cluster"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationKesselK8SPolicyIsPropagatedToK8SClusterServiceCreateK8SPolicyIsPropagatedToK8SCluster))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *KesselK8SPolicyIsPropagatedToK8SClusterServiceHTTPClientImpl) DeleteResourceRelationshipByUrn(ctx context.Context, in *DeleteResourceRelationshipByUrnRequest, opts ...http.CallOption) (*DeleteResourceRelationshipByUrnResponse, error) {
	var out DeleteResourceRelationshipByUrnResponse
	pattern := "/api/inventory/v1beta1/resource-relationships/k8s-policy.is-propagated.to-k8s-cluster"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationKesselK8SPolicyIsPropagatedToK8SClusterServiceDeleteResourceRelationshipByUrn))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *KesselK8SPolicyIsPropagatedToK8SClusterServiceHTTPClientImpl) UpdateResourceRelationshipByUrnHs(ctx context.Context, in *UpdateResourceRelationshipByUrnHsRequest, opts ...http.CallOption) (*UpdateResourceRelationshipByUrnHsResponse, error) {
	var out UpdateResourceRelationshipByUrnHsResponse
	pattern := "/api/inventory/v1beta1/resource-relationships/k8s-policy.is-propagated.to-k8s-cluster"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationKesselK8SPolicyIsPropagatedToK8SClusterServiceUpdateResourceRelationshipByUrnHs))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
