syntax = "proto3";

package kessel.inventory.v1beta1.resources;

import "google/api/annotations.proto";
import "buf/validate/validate.proto";

import "kessel/inventory/v1beta1/resources/k8s_cluster.proto";
import "kessel/inventory/v1beta1/resources/reporter_data.proto";

option go_package = "github.com/project-kessel/inventory-api/api/kessel/inventory/v1beta1/resources";
option java_multiple_files = true;
option java_package = "org.project_kessel.api.inventory.v1beta1.resources";

message CreateK8sClusterRequest {
  // The k8s cluster to create in Kessel Asset Inventory
  K8sCluster k8s_cluster = 1 [  json_name = "k8s_cluster" ];
}

message CreateK8sClusterResponse {}

message UpdateK8sClusterRequest {
  // The resource to be updated will be defined by 
  // \"<reporter_data.reporter_type>:<reporter_instaance_id>:<reporter_data.local_resource_id>\"
  // from the request body.
  K8sCluster k8s_cluster = 1 [  json_name = "k8s_cluster" ];
}

message UpdateK8sClusterResponse {}

message DeleteK8sClusterRequest {
  // The resource to be deleted will be defined by 
  // \"<reporter_data.reporter_type>:<reporter_instaance_id>:<reporter_data.local_resource_id>\" 
  // from the request body.
  ReporterData reporter_data = 1 [  json_name = "reporter_data", (buf.validate.field).required = true ];
}

message DeleteK8sClusterResponse {}

service KesselK8sClusterService {
  rpc CreateK8sCluster(CreateK8sClusterRequest) returns (CreateK8sClusterResponse) {
    option (google.api.http) = {
      post : "/api/inventory/v1beta1/resources/k8s-clusters"
      body : "*"
    };
  };

  rpc UpdateK8sCluster(UpdateK8sClusterRequest) returns (UpdateK8sClusterResponse) {
    option (google.api.http) = {
      put : "/api/inventory/v1beta1/resources/k8s-clusters"
      body : "*"
    };
  };

  rpc DeleteK8sCluster(DeleteK8sClusterRequest) returns (DeleteK8sClusterResponse) {
    option (google.api.http) = {
      delete : "/api/inventory/v1beta1/resources/k8s-clusters"
      body : "*"
    };
  };
}
