// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             (unknown)
// source: kessel/inventory/v1beta1/resources/k8s_policies_service.proto

package resources

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationKesselK8SPolicyServiceCreateK8sPolicy = "/kessel.inventory.v1beta1.resources.KesselK8sPolicyService/CreateK8sPolicy"
const OperationKesselK8SPolicyServiceDeleteK8sPolicy = "/kessel.inventory.v1beta1.resources.KesselK8sPolicyService/DeleteK8sPolicy"
const OperationKesselK8SPolicyServiceUpdateK8sPolicy = "/kessel.inventory.v1beta1.resources.KesselK8sPolicyService/UpdateK8sPolicy"

type KesselK8SPolicyServiceHTTPServer interface {
	CreateK8SPolicy(context.Context, *CreateK8SPolicyRequest) (*CreateK8SPolicyResponse, error)
	DeleteK8SPolicy(context.Context, *DeleteK8SPolicyRequest) (*DeleteK8SPolicyResponse, error)
	UpdateK8SPolicy(context.Context, *UpdateK8SPolicyRequest) (*UpdateK8SPolicyResponse, error)
}

func RegisterKesselK8SPolicyServiceHTTPServer(s *http.Server, srv KesselK8SPolicyServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/inventory/v1beta1/resources/k8s-policies", _KesselK8SPolicyService_CreateK8SPolicy0_HTTP_Handler(srv))
	r.PUT("/api/inventory/v1beta1/resources/k8s-policies", _KesselK8SPolicyService_UpdateK8SPolicy0_HTTP_Handler(srv))
	r.DELETE("/api/inventory/v1beta1/resources/k8s-policies", _KesselK8SPolicyService_DeleteK8SPolicy0_HTTP_Handler(srv))
}

func _KesselK8SPolicyService_CreateK8SPolicy0_HTTP_Handler(srv KesselK8SPolicyServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateK8SPolicyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationKesselK8SPolicyServiceCreateK8sPolicy)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateK8SPolicy(ctx, req.(*CreateK8SPolicyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateK8SPolicyResponse)
		return ctx.Result(200, reply)
	}
}

func _KesselK8SPolicyService_UpdateK8SPolicy0_HTTP_Handler(srv KesselK8SPolicyServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateK8SPolicyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationKesselK8SPolicyServiceUpdateK8sPolicy)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateK8SPolicy(ctx, req.(*UpdateK8SPolicyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateK8SPolicyResponse)
		return ctx.Result(200, reply)
	}
}

func _KesselK8SPolicyService_DeleteK8SPolicy0_HTTP_Handler(srv KesselK8SPolicyServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteK8SPolicyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationKesselK8SPolicyServiceDeleteK8sPolicy)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteK8SPolicy(ctx, req.(*DeleteK8SPolicyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteK8SPolicyResponse)
		return ctx.Result(200, reply)
	}
}

type KesselK8SPolicyServiceHTTPClient interface {
	CreateK8SPolicy(ctx context.Context, req *CreateK8SPolicyRequest, opts ...http.CallOption) (rsp *CreateK8SPolicyResponse, err error)
	DeleteK8SPolicy(ctx context.Context, req *DeleteK8SPolicyRequest, opts ...http.CallOption) (rsp *DeleteK8SPolicyResponse, err error)
	UpdateK8SPolicy(ctx context.Context, req *UpdateK8SPolicyRequest, opts ...http.CallOption) (rsp *UpdateK8SPolicyResponse, err error)
}

type KesselK8SPolicyServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewKesselK8SPolicyServiceHTTPClient(client *http.Client) KesselK8SPolicyServiceHTTPClient {
	return &KesselK8SPolicyServiceHTTPClientImpl{client}
}

func (c *KesselK8SPolicyServiceHTTPClientImpl) CreateK8SPolicy(ctx context.Context, in *CreateK8SPolicyRequest, opts ...http.CallOption) (*CreateK8SPolicyResponse, error) {
	var out CreateK8SPolicyResponse
	pattern := "/api/inventory/v1beta1/resources/k8s-policies"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationKesselK8SPolicyServiceCreateK8sPolicy))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *KesselK8SPolicyServiceHTTPClientImpl) DeleteK8SPolicy(ctx context.Context, in *DeleteK8SPolicyRequest, opts ...http.CallOption) (*DeleteK8SPolicyResponse, error) {
	var out DeleteK8SPolicyResponse
	pattern := "/api/inventory/v1beta1/resources/k8s-policies"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationKesselK8SPolicyServiceDeleteK8sPolicy))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *KesselK8SPolicyServiceHTTPClientImpl) UpdateK8SPolicy(ctx context.Context, in *UpdateK8SPolicyRequest, opts ...http.CallOption) (*UpdateK8SPolicyResponse, error) {
	var out UpdateK8SPolicyResponse
	pattern := "/api/inventory/v1beta1/resources/k8s-policies"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationKesselK8SPolicyServiceUpdateK8sPolicy))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
