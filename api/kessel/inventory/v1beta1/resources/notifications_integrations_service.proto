syntax = "proto3";

package kessel.inventory.v1beta1.resources;

import "google/api/annotations.proto";
import "buf/validate/validate.proto";

import "kessel/inventory/v1beta1/authz/common.proto";
import "kessel/inventory/v1beta1/resources/notifications_integration.proto";
import "kessel/inventory/v1beta1/resources/reporter_data.proto";

option go_package = "github.com/project-kessel/inventory-api/api/kessel/inventory/v1beta1/resources";
option java_multiple_files = true;
option java_package = "org.project_kessel.api.inventory.v1beta1.resources";

message CreateNotificationsIntegrationRequest {
  // The NotificationsIntegration to create in Kessel Asset Inventory
  NotificationsIntegration integration = 1 [ (buf.validate.field).required = true ];
}

message CreateNotificationsIntegrationResponse {}

message UpdateNotificationsIntegrationRequest {
  // The resource to be updated will be defined by 
  // \"<reporter_data.reporter_type>:<reporter_instaance_id>:<reporter_data.local_resource_id>\"
  // from the request body.
  NotificationsIntegration integration = 1 [ (buf.validate.field).required = true ];
}

message UpdateNotificationsIntegrationResponse {}

message DeleteNotificationsIntegrationRequest {
  // The resource to be deleted will be defined by 
  // \"<reporter_data.reporter_type>:<reporter_instaance_id>:<reporter_data.local_resource_id>\"
  // from the request body.
  ReporterData reporter_data = 1 [ json_name = "reporter_data", (buf.validate.field).required = true ];
}

message DeleteNotificationsIntegrationResponse {}

message ListNotificationsIntegrationsRequest {
	// resource type and parent relationship
	// permission (unless some variation of 'this is the permission used for visibility' can be baked into the schema- this is different from the permission parameter in CheckForView because only checks for actual visibility likely matter here)
	// parent resource type and id

  authz.ObjectType resource_type = 1 [(buf.validate.field).required = true];
	string relation = 2 [(buf.validate.field).string.min_len = 1];
	authz.SubjectReference subject = 3 [(buf.validate.field).required = true];
  authz.ObjectReference parent = 4 [(buf.validate.field).required = true]; 
}

message ListNotificationsIntegrationsResponse {
  NotificationsIntegration integrations = 1;
}

service KesselNotificationsIntegrationService {
  rpc CreateNotificationsIntegration(CreateNotificationsIntegrationRequest) returns (CreateNotificationsIntegrationResponse) {
    option (google.api.http) = {
      post : "/api/inventory/v1beta1/resources/notifications-integrations"
      body : "*"
    };
  };

  rpc UpdateNotificationsIntegration(UpdateNotificationsIntegrationRequest) returns (UpdateNotificationsIntegrationResponse) {
    option (google.api.http) = {
      put : "/api/inventory/v1beta1/resources/notifications-integrations"
      body : "*"
    };
  };

  rpc DeleteNotificationsIntegration(DeleteNotificationsIntegrationRequest) returns (DeleteNotificationsIntegrationResponse) {
    option (google.api.http) = {
      delete : "/api/inventory/v1beta1/resources/notifications-integrations"
      body : "*"
    };
  };
  
  rpc ListNotificationsIntegrations(ListNotificationsIntegrationsRequest) returns (stream ListNotificationsIntegrationsResponse) {
    option (google.api.http) = {
      get : "/api/inventory/v1beta1/resources/notifications-integrations"
      body : "*"
    };
  };
}
