// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             (unknown)
// source: kessel/inventory/v1beta1/resources/rhel_hosts_service.proto

package resources

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationKesselRhelHostServiceCreateRhelHost = "/kessel.inventory.v1beta1.resources.KesselRhelHostService/CreateRhelHost"
const OperationKesselRhelHostServiceDeleteRhelHost = "/kessel.inventory.v1beta1.resources.KesselRhelHostService/DeleteRhelHost"
const OperationKesselRhelHostServiceUpdateRhelHost = "/kessel.inventory.v1beta1.resources.KesselRhelHostService/UpdateRhelHost"

type KesselRhelHostServiceHTTPServer interface {
	CreateRhelHost(context.Context, *CreateRhelHostRequest) (*CreateRhelHostResponse, error)
	DeleteRhelHost(context.Context, *DeleteRhelHostRequest) (*DeleteRhelHostResponse, error)
	UpdateRhelHost(context.Context, *UpdateRhelHostRequest) (*UpdateRhelHostResponse, error)
}

func RegisterKesselRhelHostServiceHTTPServer(s *http.Server, srv KesselRhelHostServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/inventory/v1beta1/resources/rhel-hosts", _KesselRhelHostService_CreateRhelHost0_HTTP_Handler(srv))
	r.PUT("/api/inventory/v1beta1/resources/rhel-hosts", _KesselRhelHostService_UpdateRhelHost0_HTTP_Handler(srv))
	r.DELETE("/api/inventory/v1beta1/resources/rhel-hosts", _KesselRhelHostService_DeleteRhelHost0_HTTP_Handler(srv))
}

func _KesselRhelHostService_CreateRhelHost0_HTTP_Handler(srv KesselRhelHostServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateRhelHostRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationKesselRhelHostServiceCreateRhelHost)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateRhelHost(ctx, req.(*CreateRhelHostRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateRhelHostResponse)
		return ctx.Result(200, reply)
	}
}

func _KesselRhelHostService_UpdateRhelHost0_HTTP_Handler(srv KesselRhelHostServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateRhelHostRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationKesselRhelHostServiceUpdateRhelHost)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateRhelHost(ctx, req.(*UpdateRhelHostRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateRhelHostResponse)
		return ctx.Result(200, reply)
	}
}

func _KesselRhelHostService_DeleteRhelHost0_HTTP_Handler(srv KesselRhelHostServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteRhelHostRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationKesselRhelHostServiceDeleteRhelHost)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteRhelHost(ctx, req.(*DeleteRhelHostRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteRhelHostResponse)
		return ctx.Result(200, reply)
	}
}

type KesselRhelHostServiceHTTPClient interface {
	CreateRhelHost(ctx context.Context, req *CreateRhelHostRequest, opts ...http.CallOption) (rsp *CreateRhelHostResponse, err error)
	DeleteRhelHost(ctx context.Context, req *DeleteRhelHostRequest, opts ...http.CallOption) (rsp *DeleteRhelHostResponse, err error)
	UpdateRhelHost(ctx context.Context, req *UpdateRhelHostRequest, opts ...http.CallOption) (rsp *UpdateRhelHostResponse, err error)
}

type KesselRhelHostServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewKesselRhelHostServiceHTTPClient(client *http.Client) KesselRhelHostServiceHTTPClient {
	return &KesselRhelHostServiceHTTPClientImpl{client}
}

func (c *KesselRhelHostServiceHTTPClientImpl) CreateRhelHost(ctx context.Context, in *CreateRhelHostRequest, opts ...http.CallOption) (*CreateRhelHostResponse, error) {
	var out CreateRhelHostResponse
	pattern := "/api/inventory/v1beta1/resources/rhel-hosts"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationKesselRhelHostServiceCreateRhelHost))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *KesselRhelHostServiceHTTPClientImpl) DeleteRhelHost(ctx context.Context, in *DeleteRhelHostRequest, opts ...http.CallOption) (*DeleteRhelHostResponse, error) {
	var out DeleteRhelHostResponse
	pattern := "/api/inventory/v1beta1/resources/rhel-hosts"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationKesselRhelHostServiceDeleteRhelHost))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *KesselRhelHostServiceHTTPClientImpl) UpdateRhelHost(ctx context.Context, in *UpdateRhelHostRequest, opts ...http.CallOption) (*UpdateRhelHostResponse, error) {
	var out UpdateRhelHostResponse
	pattern := "/api/inventory/v1beta1/resources/rhel-hosts"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationKesselRhelHostServiceUpdateRhelHost))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
