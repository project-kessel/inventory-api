// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             (unknown)
// source: kessel/inventory/v1beta2/inventory_service.proto

package v1beta2

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationKesselInventoryServiceCheck = "/kessel.inventory.v1beta2.KesselInventoryService/Check"
const OperationKesselInventoryServiceCheckForUpdate = "/kessel.inventory.v1beta2.KesselInventoryService/CheckForUpdate"
const OperationKesselInventoryServiceDeleteResource = "/kessel.inventory.v1beta2.KesselInventoryService/DeleteResource"
const OperationKesselInventoryServiceReportResource = "/kessel.inventory.v1beta2.KesselInventoryService/ReportResource"

type KesselInventoryServiceHTTPServer interface {
	// Check Checks for the existence of a single Relationship
	// (a Relation between a Resource and a Subject or Subject Set).
	Check(context.Context, *CheckRequest) (*CheckResponse, error)
	CheckForUpdate(context.Context, *CheckForUpdateRequest) (*CheckForUpdateResponse, error)
	DeleteResource(context.Context, *DeleteResourceRequest) (*DeleteResourceResponse, error)
	ReportResource(context.Context, *ReportResourceRequest) (*ReportResourceResponse, error)
}

func RegisterKesselInventoryServiceHTTPServer(s *http.Server, srv KesselInventoryServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/inventory/v1beta2/check", _KesselInventoryService_Check0_HTTP_Handler(srv))
	r.POST("/api/inventory/v1beta2/checkforupdate", _KesselInventoryService_CheckForUpdate0_HTTP_Handler(srv))
	r.POST("/api/inventory/v1beta2/resources", _KesselInventoryService_ReportResource0_HTTP_Handler(srv))
	r.DELETE("/api/inventory/v1beta2/resources", _KesselInventoryService_DeleteResource0_HTTP_Handler(srv))
}

func _KesselInventoryService_Check0_HTTP_Handler(srv KesselInventoryServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CheckRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationKesselInventoryServiceCheck)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Check(ctx, req.(*CheckRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CheckResponse)
		return ctx.Result(200, reply)
	}
}

func _KesselInventoryService_CheckForUpdate0_HTTP_Handler(srv KesselInventoryServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CheckForUpdateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationKesselInventoryServiceCheckForUpdate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CheckForUpdate(ctx, req.(*CheckForUpdateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CheckForUpdateResponse)
		return ctx.Result(200, reply)
	}
}

func _KesselInventoryService_ReportResource0_HTTP_Handler(srv KesselInventoryServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ReportResourceRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationKesselInventoryServiceReportResource)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ReportResource(ctx, req.(*ReportResourceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ReportResourceResponse)
		return ctx.Result(200, reply)
	}
}

func _KesselInventoryService_DeleteResource0_HTTP_Handler(srv KesselInventoryServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteResourceRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationKesselInventoryServiceDeleteResource)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteResource(ctx, req.(*DeleteResourceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteResourceResponse)
		return ctx.Result(200, reply)
	}
}

type KesselInventoryServiceHTTPClient interface {
	Check(ctx context.Context, req *CheckRequest, opts ...http.CallOption) (rsp *CheckResponse, err error)
	CheckForUpdate(ctx context.Context, req *CheckForUpdateRequest, opts ...http.CallOption) (rsp *CheckForUpdateResponse, err error)
	DeleteResource(ctx context.Context, req *DeleteResourceRequest, opts ...http.CallOption) (rsp *DeleteResourceResponse, err error)
	ReportResource(ctx context.Context, req *ReportResourceRequest, opts ...http.CallOption) (rsp *ReportResourceResponse, err error)
}

type KesselInventoryServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewKesselInventoryServiceHTTPClient(client *http.Client) KesselInventoryServiceHTTPClient {
	return &KesselInventoryServiceHTTPClientImpl{client}
}

func (c *KesselInventoryServiceHTTPClientImpl) Check(ctx context.Context, in *CheckRequest, opts ...http.CallOption) (*CheckResponse, error) {
	var out CheckResponse
	pattern := "/api/inventory/v1beta2/check"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationKesselInventoryServiceCheck))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *KesselInventoryServiceHTTPClientImpl) CheckForUpdate(ctx context.Context, in *CheckForUpdateRequest, opts ...http.CallOption) (*CheckForUpdateResponse, error) {
	var out CheckForUpdateResponse
	pattern := "/api/inventory/v1beta2/checkforupdate"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationKesselInventoryServiceCheckForUpdate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *KesselInventoryServiceHTTPClientImpl) DeleteResource(ctx context.Context, in *DeleteResourceRequest, opts ...http.CallOption) (*DeleteResourceResponse, error) {
	var out DeleteResourceResponse
	pattern := "/api/inventory/v1beta2/resources"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationKesselInventoryServiceDeleteResource))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *KesselInventoryServiceHTTPClientImpl) ReportResource(ctx context.Context, in *ReportResourceRequest, opts ...http.CallOption) (*ReportResourceResponse, error) {
	var out ReportResourceResponse
	pattern := "/api/inventory/v1beta2/resources"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationKesselInventoryServiceReportResource))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
