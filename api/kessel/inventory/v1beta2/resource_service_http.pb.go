// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             (unknown)
// source: kessel/inventory/v1beta2/resource_service.proto

package v1beta2

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationKesselResourceServiceDeleteResource = "/kessel.inventory.v1beta2.KesselResourceService/DeleteResource"
const OperationKesselResourceServiceReportResource = "/kessel.inventory.v1beta2.KesselResourceService/ReportResource"

type KesselResourceServiceHTTPServer interface {
	DeleteResource(context.Context, *DeleteResourceRequest) (*DeleteResourceResponse, error)
	ReportResource(context.Context, *ReportResourceRequest) (*ReportResourceResponse, error)
}

func RegisterKesselResourceServiceHTTPServer(s *http.Server, srv KesselResourceServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/inventory/v1beta2/resources", _KesselResourceService_ReportResource0_HTTP_Handler(srv))
	r.DELETE("/api/inventory/v1beta2/resources", _KesselResourceService_DeleteResource0_HTTP_Handler(srv))
}

func _KesselResourceService_ReportResource0_HTTP_Handler(srv KesselResourceServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ReportResourceRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationKesselResourceServiceReportResource)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ReportResource(ctx, req.(*ReportResourceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ReportResourceResponse)
		return ctx.Result(200, reply)
	}
}

func _KesselResourceService_DeleteResource0_HTTP_Handler(srv KesselResourceServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteResourceRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationKesselResourceServiceDeleteResource)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteResource(ctx, req.(*DeleteResourceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteResourceResponse)
		return ctx.Result(200, reply)
	}
}

type KesselResourceServiceHTTPClient interface {
	DeleteResource(ctx context.Context, req *DeleteResourceRequest, opts ...http.CallOption) (rsp *DeleteResourceResponse, err error)
	ReportResource(ctx context.Context, req *ReportResourceRequest, opts ...http.CallOption) (rsp *ReportResourceResponse, err error)
}

type KesselResourceServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewKesselResourceServiceHTTPClient(client *http.Client) KesselResourceServiceHTTPClient {
	return &KesselResourceServiceHTTPClientImpl{client}
}

func (c *KesselResourceServiceHTTPClientImpl) DeleteResource(ctx context.Context, in *DeleteResourceRequest, opts ...http.CallOption) (*DeleteResourceResponse, error) {
	var out DeleteResourceResponse
	pattern := "/api/inventory/v1beta2/resources"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationKesselResourceServiceDeleteResource))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *KesselResourceServiceHTTPClientImpl) ReportResource(ctx context.Context, in *ReportResourceRequest, opts ...http.CallOption) (*ReportResourceResponse, error) {
	var out ReportResourceResponse
	pattern := "/api/inventory/v1beta2/resources"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationKesselResourceServiceReportResource))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
