apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: inventory
objects:
  - apiVersion: cloud.redhat.com/v1alpha1
    kind: ClowdApp
    metadata:
      name: kessel-inventory
    spec:
      envName: ${ENV_NAME}
      database:
        name: kessel-inventory
      kafkaTopics:
      - topicName: outbox.event.kessel.tuples
        partitions: 1
        replicas: 3
      - topicName: outbox.event.kessel.resources
        partitions: 1
        replicas: 3
      optionalDependencies:
        - kessel-relations
      deployments:
        - name: api
          replicas: ${{REPLICAS}}
          podSpec:
            initContainers:
            - name: db-operations
              image: registry.redhat.io/rhel9/postgresql-15:1-54
              command: ["/bin/sh", "-c"]
              args:
                - cd /tmp && curl -OL https://github.com/jqlang/jq/releases/download/jq-1.7/jq-linux-amd64 && mv jq-linux-amd64 jq && chmod +x jq;
                  export PGHOST=$(cat /cdapp/cdappconfig.json | ./jq -r '.database.hostname');
                  export PGPORT=$(cat /cdapp/cdappconfig.json | ./jq -r '.database.port');
                  export PGUSER=$(cat /cdapp/cdappconfig.json | ./jq -r '.database.username');
                  export PGDATABASE=$(cat /cdapp/cdappconfig.json | ./jq -r '.database.name');
                  export PGPASSWORD=$(cat /cdapp/cdappconfig.json | ./jq -r '.database.password');
                  for i in relationship_metadata metadata;
                  do psql -c "DROP TABLE IF EXISTS $i CASCADE"; done;
                  for i in local_inventory_to_resources inventory_resources relationship_history relationships resource_history resources resource reporter_resources notifications_integrations hosts relationship_reporters reporters labels k8_s_policy_is_propagated_to_k8_s_clusters k8_s_clusters k8s_policies common_representation reporter_representation common_representations reporter_representations;
                  do psql -c "DROP TABLE IF EXISTS $i";
                  done;
              inheritEnv: true
            - name: copy-resources
              image: registry.access.redhat.com/ubi9
              imagePullPolicy: Always
              command:
                - /bin/sh
                - "-c"
                - |
                  echo "Extracting resources from tarball..."
                  tar -xzf /mnt/resources/resources.tar.gz -C /data/schema/resources
                  echo "Extraction complete!"
              volumeMounts:
                - name: resources-tarball
                  mountPath: "/mnt/resources"
                - name: resource-volume
                  mountPath: "/data/schema/resources"
            - name: migration
              image: ${INVENTORY_IMAGE}:${IMAGE_TAG}
              command: ["inventory-api"]
              args: ["migrate"]
              inheritEnv: true
            image: ${INVENTORY_IMAGE}:${IMAGE_TAG}
            command: ["inventory-api"]
            args: ["serve"]
            livenessProbe:
              httpGet:
                path: /api/inventory/v1/livez
                port: 8000
            readinessProbe:
              httpGet:
                path: /api/inventory/v1/readyz
                port: 8000
            resources:
              requests:
                memory: ${INVENTORY_REQUESTS_MEMORY}
                cpu: ${INVENTORY_REQUESTS_CPU}
              limits:
                memory: ${INVENTORY_LIMITS_MEMORY}
                cpu: ${INVENTORY_LIMITS_CPU}
            env:
            - name: CLOWDER_ENABLED
              value: "true"
            - name: INVENTORY_API_CONFIG
              value: "/inventory/inventory-api-config.yaml"
            - name: PGDATA
              value: /temp/data
            - name: RESOURCE_DIR
              value: "/data/schema/resources"
            volumeMounts:
                - name: config-volume
                  mountPath: "/inventory"
                - name: kafka-ca-certs
                  mountPath: "/kafka-ca-certs"
                - name: resource-volume
                  mountPath: "/data/schema/resources"
                - name: resources-tarball
                  mountPath: "/mnt/resources"
            volumes:
              - name: config-volume
                secret:
                  secretName: ${INVENTORY_API_CONFIG_SECRET}
              - name: kafka-ca-certs
                secret:
                  secretName: ${CA_CERT_SECRET}
                  optional: true
              - name: resource-volume
                emptyDir: { }
              - name: resources-tarball
                configMap:
                  name: resources-tarball
          webServices:
            public:
              enabled: true
              apiPath: inventory
  - kind: PodDisruptionBudget
    apiVersion: policy/v1
    metadata:
      name: kessel-inventory-api-pdb
    spec:
      minAvailable: 1
      selector:
        matchLabels:
          app: kessel-inventory
parameters:
  - description: ClowdEnvironment name (ephemeral, stage, prod)
    name: ENV_NAME
    required: true
  - description: App Image
    name: INVENTORY_IMAGE
    value: quay.io/redhat-services-prod/project-kessel-tenant/kessel-inventory/inventory-api
  - description: Image Tag
    name: IMAGE_TAG
    required: true
    value: latest
  - description: Number of replicas
    name: REPLICAS
    value: "1"
  - description: Name of the Inventory API Config K8s secret
    name: INVENTORY_API_CONFIG_SECRET
    value: inventory-api-config-v1beta2
  - description: Name of Secret that contains the Kafka clusters' CA Cert (if required)
    name: CA_CERT_SECRET
    value: kessel-kafka-connect-config
  - description: Memory request for Inventory service
    name: INVENTORY_REQUESTS_MEMORY
    value: '512Mi'
  - description: CPU request for Inventory service
    name: INVENTORY_REQUESTS_CPU
    value: '150m'
  - description: Memory limit for Inventory service
    name: INVENTORY_LIMITS_MEMORY
    value: '1Gi'
  - description: CPU limit for Inventory service
    name: INVENTORY_LIMITS_CPU
    value: '300m'
