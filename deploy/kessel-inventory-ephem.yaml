apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: inventory
objects:
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: inventory-api-config
    data:
      inventory-api-config.yaml: |
        storage:
          disable-persistence: false
          max-serialization-retries: 10
        authn:
          allow-unauthenticated: true
        authz:
          kessel:
            insecure-client: true
            enable-oidc-auth: false
        consumer:
          enabled: true
          bootstrap-servers: inventory-kafka-kafka-bootstrap:9092
          topic: outbox.event.kessel.tuples
          retry-options:
            consumer-max-retries: -1
            operation-max-retries: -1
            backoff-factor: 5
            max-backoff-seconds: 30
          auth:
            enabled: false
            security-protocol: sasl_plaintext
            sasl-mechanism: SCRAM-SHA-512
            sasl-username: inventory-consumer
            sasl-password: REPLACE_ME
        consistency:
          read-after-write-enabled: true # false == off for all service providers
          read-after-write-allowlist: ["*"] # specify ["*"] to allow any request to optionally r-a-w
        log:
          level: "debug"

  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: resources-tarball
    binaryData:
        resources.tar.gz: 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

  - apiVersion: rbac.authorization.k8s.io/v1
    kind: Role
    metadata:
      name: connector-configuration-role
    rules:
    - apiGroups: [""]
      resources: ["secrets"]
      verbs: ["get"]

  - apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      name: connector-configuration-rolebinding
    subjects:
    - kind: ServiceAccount
      name: inventory-kafka-connect-connect
    roleRef:
      kind: Role
      name: connector-configuration-role
      apiGroup: rbac.authorization.k8s.io

  - apiVersion: kafka.strimzi.io/v1beta2
    kind: Kafka
    metadata:
      name: inventory-kafka
    spec:
      entityOperator:
        template:
          pod:
            metadata:
              labels:
                service: strimziKafka
          topicOperatorContainer:
            env:
            - name: STRIMZI_USE_FINALIZERS
              value: "false"
        tlsSidecar:
          resources:
            limits:
              cpu: 100m
              memory: 100Mi
            requests:
              cpu: 50m
              memory: 50Mi
        topicOperator:
          resources:
            limits:
              cpu: 200m
              memory: 500Mi
            requests:
              cpu: 50m
              memory: 250Mi
        userOperator:
          resources:
            limits:
              cpu: 400m
              memory: 500Mi
            requests:
              cpu: 50m
              memory: 250Mi
      kafka:
        config:
          offsets.topic.replication.factor: "1"
        jvmOptions: {}
        listeners:
        - name: tcp
          port: 9092
          tls: false
          type: internal
        - name: secure
          port: 9094
          tls: false
          type: internal
          authentication:
            type: scram-sha-512
        replicas: 1
        resources:
          limits:
            cpu: 500m
            memory: 1Gi
          requests:
            cpu: 250m
            memory: 600Mi
        storage:
          type: ephemeral
        template:
          perPodService:
            metadata:
              labels:
                service: strimziKafka
          pod:
            metadata:
              labels:
                service: strimziKafka
        version: 3.7.0
      zookeeper:
        replicas: 1
        resources:
          limits:
            cpu: 350m
            memory: 800Mi
          requests:
            cpu: 200m
            memory: 400Mi
        storage:
          type: ephemeral
        template:
          nodesService:
            metadata:
              labels:
                service: strimziKafka
          pod:
            metadata:
              labels:
                service: strimziKafka

  - apiVersion: kafka.strimzi.io/v1beta2
    kind: KafkaTopic
    metadata:
      name: "outbox.event.kessel.tuples"
      labels:
        strimzi.io/cluster: inventory-kafka
    spec:
      partitions: 1
      replicas: 1
      topicName: "outbox.event.kessel.tuples"

  - apiVersion: kafka.strimzi.io/v1beta2
    kind: KafkaTopic
    metadata:
      name: "outbox.event.kessel.resources"
      labels:
        strimzi.io/cluster: inventory-kafka
    spec:
      partitions: 1
      replicas: 1
      topicName: "outbox.event.kessel.resources"

  - apiVersion: kafka.strimzi.io/v1beta2
    kind: KafkaUser
    metadata:
      name: inventory-consumer
      labels:
        strimzi.io/cluster: inventory-kafka
    spec:
      authentication:
        type: scram-sha-512

  - apiVersion: kafka.strimzi.io/v1beta2
    kind: KafkaConnect
    metadata:
      annotations:
        strimzi.io/use-connector-resources: "true"
      generation: 1
      name: inventory-kafka-connect
    spec:
      bootstrapServers: inventory-kafka-kafka-bootstrap:9094
      authentication:
        type: scram-sha-512
        username: inventory-consumer
        passwordSecret:
          secretName: inventory-consumer
          password: password
      config:
        config.storage.replication.factor: "1"
        config.storage.topic: connect-cluster-configs
        connector.client.config.override.policy: All
        group.id: connect-cluster
        offset.storage.replication.factor: "1"
        offset.storage.topic: connect-cluster-offsets
        status.storage.replication.factor: "1"
        status.storage.topic: connect-cluster-status
        config.providers: secrets
        config.providers.secrets.class: io.strimzi.kafka.KubernetesSecretConfigProvider
      image: quay.io/cloudservices/kafka-connect:latest
      replicas: 1
      resources:
        limits:
          cpu: 500m
          memory: 1Gi
        requests:
          cpu: 250m
          memory: 512Mi
      template:
        pod:
          imagePullSecrets:
          - name: quay-cloudservices-pull
      version: 3.7.0

  - apiVersion: kafka.strimzi.io/v1beta2
    kind: KafkaConnector
    metadata:
      name: kessel-inventory-source-connector
      labels:
        strimzi.io/cluster: inventory-kafka-connect
    spec:
      class: io.debezium.connector.postgresql.PostgresConnector
      tasksMax: ${{MAX_TASKS}}
      config:
        database.server.name: kessel-inventory-db
        database.dbname: ${secrets:kessel-inventory-db:db.name}
        database.hostname: ${secrets:kessel-inventory-db:db.host}
        database.port: ${secrets:kessel-inventory-db:db.port}
        database.user: ${secrets:kessel-inventory-db:db.user}
        database.password: ${secrets:kessel-inventory-db:db.password}
        topic.prefix: kessel-inventory
        table.whitelist: public.outbox_events # Required for Debezium < v1.3.0 support
        table.include.list: public.outbox_events # Required for Debezium > v1.3.0
        transforms: outbox
        transforms.outbox.type: io.debezium.transforms.outbox.EventRouter
        transforms.outbox.table.fields.additional.placement: operation:header, txid:header
        transforms.outbox.table.expand.json.payload: true
        value.converter: org.apache.kafka.connect.json.JsonConverter
        plugin.name: pgoutput
        heartbeat.interval.ms: ${DEBEZIUM_HEARTBEAT_INTERVAL_MS}
        heartbeat.action.query: ${DEBEZIUM_ACTION_QUERY}
        topic.heartbeat.prefix: ${TOPIC_HEARTBEAT_PREFIX}
        poll.interval.ms: ${DEBEZIUM_POLL_INTERVAL_MS}

  - apiVersion: cloud.redhat.com/v1alpha1
    kind: ClowdApp
    metadata:
      name: kessel-inventory
    spec:
      envName: ${ENV_NAME}
      database:
        name: kessel-inventory
        version: 16
      optionalDependencies:
        - kessel-relations
      deployments:
        - name: api
          replicas: ${{REPLICAS}}
          podSpec:
            initContainers:
            - name: copy-resources
              image: busybox
              imagePullPolicy: Always
              command:
                - /bin/sh
                - "-c"
                - |
                  echo "Extracting resources from tarball..."
                  tar -xzf /mnt/resources/resources.tar.gz -C /data/schema/resources
                  echo "Extraction complete!"
              volumeMounts:
                - name: resources-tarball
                  mountPath: "/mnt/resources"
                - name: resource-volume
                  mountPath: "/data/schema/resources"
            - name: migration
              image: ${INVENTORY_IMAGE}:${IMAGE_TAG}
              imagePullPolicy: Always
              command: ["inventory-api"]
              args: ["migrate"]
              inheritEnv: true
            image: ${INVENTORY_IMAGE}:${IMAGE_TAG}
            imagePullPolicy: Always
            command: ["inventory-api"]
            args: ["serve"]
            livenessProbe:
              httpGet:
                path: /api/inventory/v1/livez
                port: 8000
            readinessProbe:
              httpGet:
                path: /api/inventory/v1/readyz
                port: 8000
            env:
            - name: CLOWDER_ENABLED
              value: "true"
            - name: INVENTORY_API_CONFIG
              value: "/inventory/inventory-api-config.yaml"
            - name: PGDATA
              value: /temp/data
            - name: RESOURCE_DIR
              value: "/data/schema/resources"
            volumeMounts:
                - name: config-volume
                  mountPath: "/inventory"
                - name: resource-volume
                  mountPath: "/data/schema/resources"
                - name: resources-tarball
                  mountPath: "/mnt/resources"
            volumes:
              - name: config-volume
                configMap:
                  name: inventory-api-config
              - name: resource-volume
                emptyDir: { }
              - name: resources-tarball
                configMap:
                  name: resources-tarball
          webServices:
            public:
              enabled: true
              apiPath: inventory
      testing:
        iqePlugin: kessel-inventory

parameters:
  - description: ClowdEnvironment name (ephemeral, stage, prod)
    name: ENV_NAME
    required: true
  - description: App Image
    name: INVENTORY_IMAGE
    value: quay.io/redhat-services-prod/project-kessel-tenant/kessel-inventory/inventory-api
  - description: Image Tag
    name: IMAGE_TAG
    required: true
    value: latest
  - description: Number of replicas
    name: REPLICAS
    value: "1"
  - name: KAFKA_CONNECT_INSTANCE
    value: inventory-kafka-connect
    description: Name of the target Kafka Connect instance for Connector
  - name: MAX_TASKS
    value: "1"
    description: How many tasks the Kafka Connect instance can create to process this Connector's work
  - name: TOPIC_HEARTBEAT_PREFIX
    value: debezium-heartbeat
    description: Prefix for the connector heartbeat topic
  - name: DEBEZIUM_ACTION_QUERY
    value: "SELECT pg_logical_emit_message(false, 'heartbeat', now()::varchar);"
    description: Query action that runs for each heartbeat event
  - name: DEBEZIUM_HEARTBEAT_INTERVAL_MS
    value: "300000"
    description: The interval for the Debezium heartbeat in ms
  - name: DEBEZIUM_POLL_INTERVAL_MS
    value: "250"
    description: The interval for the Debezium batch processing
