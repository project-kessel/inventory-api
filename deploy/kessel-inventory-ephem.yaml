apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: inventory
objects:
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: inventory-api-config
    data:
      inventory-api-config.yaml: |
        storage:
          disable-persistence: false
          max-serialization-retries: 10
        authn:
          allow-unauthenticated: true
        authz:
          kessel:
            insecure-client: true
            enable-oidc-auth: false
        consumer:
          enabled: true
          bootstrap-servers: inventory-kafka-kafka-bootstrap:9092
          topic: outbox.event.kessel.tuples
          retry-options:
            consumer-max-retries: -1
            operation-max-retries: -1
            backoff-factor: 5
            max-backoff-seconds: 30
          auth:
            enabled: false
            security-protocol: sasl_plaintext
            sasl-mechanism: SCRAM-SHA-512
            sasl-username: inventory-consumer
            sasl-password: REPLACE_ME
        consistency:
          read-after-write-enabled: true # false == off for all service providers
          read-after-write-allowlist: ["*"] # specify ["*"] to allow any request to optionally r-a-w
        log:
          level: "debug"

  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: resources-tarball
    binaryData:
        resources.tar.gz: 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

  - apiVersion: rbac.authorization.k8s.io/v1
    kind: Role
    metadata:
      name: connector-configuration-role
    rules:
    - apiGroups: [""]
      resources: ["secrets"]
      verbs: ["get"]

  - apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      name: connector-configuration-rolebinding
    subjects:
    - kind: ServiceAccount
      name: inventory-kafka-connect-connect
    roleRef:
      kind: Role
      name: connector-configuration-role
      apiGroup: rbac.authorization.k8s.io

  - apiVersion: kafka.strimzi.io/v1beta2
    kind: Kafka
    metadata:
      name: inventory-kafka
    spec:
      entityOperator:
        template:
          pod:
            metadata:
              labels:
                service: strimziKafka
          topicOperatorContainer:
            env:
            - name: STRIMZI_USE_FINALIZERS
              value: "false"
        tlsSidecar:
          resources:
            limits:
              cpu: 100m
              memory: 100Mi
            requests:
              cpu: 50m
              memory: 50Mi
        topicOperator:
          resources:
            limits:
              cpu: 200m
              memory: 500Mi
            requests:
              cpu: 50m
              memory: 250Mi
        userOperator:
          resources:
            limits:
              cpu: 400m
              memory: 500Mi
            requests:
              cpu: 50m
              memory: 250Mi
      kafka:
        config:
          offsets.topic.replication.factor: "1"
        jvmOptions: {}
        listeners:
        - name: tcp
          port: 9092
          tls: false
          type: internal
        - name: secure
          port: 9094
          tls: false
          type: internal
          authentication:
            type: scram-sha-512
        replicas: 1
        resources:
          limits:
            cpu: 500m
            memory: 1Gi
          requests:
            cpu: 250m
            memory: 600Mi
        storage:
          type: ephemeral
        template:
          perPodService:
            metadata:
              labels:
                service: strimziKafka
          pod:
            metadata:
              labels:
                service: strimziKafka
        version: 3.7.0
      zookeeper:
        replicas: 1
        resources:
          limits:
            cpu: 350m
            memory: 800Mi
          requests:
            cpu: 200m
            memory: 400Mi
        storage:
          type: ephemeral
        template:
          nodesService:
            metadata:
              labels:
                service: strimziKafka
          pod:
            metadata:
              labels:
                service: strimziKafka

  - apiVersion: kafka.strimzi.io/v1beta2
    kind: KafkaTopic
    metadata:
      name: "outbox.event.kessel.tuples"
      labels:
        strimzi.io/cluster: inventory-kafka
    spec:
      partitions: 1
      replicas: 1
      topicName: "outbox.event.kessel.tuples"

  - apiVersion: kafka.strimzi.io/v1beta2
    kind: KafkaTopic
    metadata:
      name: "outbox.event.kessel.resources"
      labels:
        strimzi.io/cluster: inventory-kafka
    spec:
      partitions: 1
      replicas: 1
      topicName: "outbox.event.kessel.resources"

  - apiVersion: kafka.strimzi.io/v1beta2
    kind: KafkaUser
    metadata:
      name: inventory-consumer
      labels:
        strimzi.io/cluster: inventory-kafka
    spec:
      authentication:
        type: scram-sha-512

  - apiVersion: kafka.strimzi.io/v1beta2
    kind: KafkaConnect
    metadata:
      annotations:
        strimzi.io/use-connector-resources: "true"
      generation: 1
      name: inventory-kafka-connect
    spec:
      bootstrapServers: inventory-kafka-kafka-bootstrap:9094
      authentication:
        type: scram-sha-512
        username: inventory-consumer
        passwordSecret:
          secretName: inventory-consumer
          password: password
      config:
        config.storage.replication.factor: "1"
        config.storage.topic: connect-cluster-configs
        connector.client.config.override.policy: All
        group.id: connect-cluster
        offset.storage.replication.factor: "1"
        offset.storage.topic: connect-cluster-offsets
        status.storage.replication.factor: "1"
        status.storage.topic: connect-cluster-status
        config.providers: secrets
        config.providers.secrets.class: io.strimzi.kafka.KubernetesSecretConfigProvider
      image: quay.io/cloudservices/kafka-connect:latest
      replicas: 1
      resources:
        limits:
          cpu: 500m
          memory: 1Gi
        requests:
          cpu: 250m
          memory: 512Mi
      template:
        pod:
          imagePullSecrets:
          - name: quay-cloudservices-pull
      version: 3.7.0

  - apiVersion: kafka.strimzi.io/v1beta2
    kind: KafkaConnector
    metadata:
      name: kessel-inventory-source-connector
      labels:
        strimzi.io/cluster: inventory-kafka-connect
    spec:
      class: io.debezium.connector.postgresql.PostgresConnector
      tasksMax: ${{MAX_TASKS}}
      config:
        database.server.name: kessel-inventory-db
        database.dbname: ${secrets:kessel-inventory-db:db.name}
        database.hostname: ${secrets:kessel-inventory-db:db.host}
        database.port: ${secrets:kessel-inventory-db:db.port}
        database.user: ${secrets:kessel-inventory-db:db.user}
        database.password: ${secrets:kessel-inventory-db:db.password}
        topic.prefix: kessel-inventory
        table.whitelist: public.outbox_events # Required for Debezium < v1.3.0 support
        table.include.list: public.outbox_events # Required for Debezium > v1.3.0
        transforms: outbox
        transforms.outbox.type: io.debezium.transforms.outbox.EventRouter
        transforms.outbox.table.fields.additional.placement: operation:header, txid:header
        transforms.outbox.table.expand.json.payload: true
        value.converter: org.apache.kafka.connect.json.JsonConverter
        plugin.name: pgoutput
        heartbeat.interval.ms: ${DEBEZIUM_HEARTBEAT_INTERVAL_MS}
        heartbeat.action.query: ${DEBEZIUM_ACTION_QUERY}
        topic.heartbeat.prefix: ${TOPIC_HEARTBEAT_PREFIX}
        poll.interval.ms: ${DEBEZIUM_POLL_INTERVAL_MS}

  - apiVersion: cloud.redhat.com/v1alpha1
    kind: ClowdApp
    metadata:
      name: kessel-inventory
    spec:
      envName: ${ENV_NAME}
      database:
        name: kessel-inventory
        version: 16
      optionalDependencies:
        - kessel-relations
      deployments:
        - name: api
          replicas: ${{REPLICAS}}
          podSpec:
            initContainers:
            - name: copy-resources
              image: busybox
              imagePullPolicy: Always
              command:
                - /bin/sh
                - "-c"
                - |
                  echo "Extracting resources from tarball..."
                  tar -xzf /mnt/resources/resources.tar.gz -C /data/schema/resources
                  echo "Extraction complete!"
              volumeMounts:
                - name: resources-tarball
                  mountPath: "/mnt/resources"
                - name: resource-volume
                  mountPath: "/data/schema/resources"
            - name: migration
              image: ${INVENTORY_IMAGE}:${IMAGE_TAG}
              imagePullPolicy: Always
              command: ["inventory-api"]
              args: ["migrate"]
              inheritEnv: true
            image: ${INVENTORY_IMAGE}:${IMAGE_TAG}
            imagePullPolicy: Always
            command: ["inventory-api"]
            args: ["serve"]
            livenessProbe:
              httpGet:
                path: /api/inventory/v1/livez
                port: 8000
            readinessProbe:
              httpGet:
                path: /api/inventory/v1/readyz
                port: 8000
            env:
            - name: CLOWDER_ENABLED
              value: "true"
            - name: INVENTORY_API_CONFIG
              value: "/inventory/inventory-api-config.yaml"
            - name: PGDATA
              value: /temp/data
            - name: RESOURCE_DIR
              value: "/data/schema/resources"
            volumeMounts:
                - name: config-volume
                  mountPath: "/inventory"
                - name: resource-volume
                  mountPath: "/data/schema/resources"
                - name: resources-tarball
                  mountPath: "/mnt/resources"
            volumes:
              - name: config-volume
                configMap:
                  name: inventory-api-config
              - name: resource-volume
                emptyDir: { }
              - name: resources-tarball
                configMap:
                  name: resources-tarball
          webServices:
            public:
              enabled: true
              apiPath: inventory
      testing:
        iqePlugin: kessel-inventory

parameters:
  - description: ClowdEnvironment name (ephemeral, stage, prod)
    name: ENV_NAME
    required: true
  - description: App Image
    name: INVENTORY_IMAGE
    value: quay.io/redhat-services-prod/project-kessel-tenant/kessel-inventory/inventory-api
  - description: Image Tag
    name: IMAGE_TAG
    required: true
    value: latest
  - description: Number of replicas
    name: REPLICAS
    value: "1"
  - name: KAFKA_CONNECT_INSTANCE
    value: inventory-kafka-connect
    description: Name of the target Kafka Connect instance for Connector
  - name: MAX_TASKS
    value: "1"
    description: How many tasks the Kafka Connect instance can create to process this Connector's work
  - name: TOPIC_HEARTBEAT_PREFIX
    value: debezium-heartbeat
    description: Prefix for the connector heartbeat topic
  - name: DEBEZIUM_ACTION_QUERY
    value: "SELECT pg_logical_emit_message(false, 'heartbeat', now()::varchar);"
    description: Query action that runs for each heartbeat event
  - name: DEBEZIUM_HEARTBEAT_INTERVAL_MS
    value: "300000"
    description: The interval for the Debezium heartbeat in ms
  - name: DEBEZIUM_POLL_INTERVAL_MS
    value: "250"
    description: The interval for the Debezium batch processing
