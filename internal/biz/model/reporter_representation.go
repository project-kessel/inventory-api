package model

import (
	"fmt"
	"strings"

	"github.com/google/uuid"
	"gorm.io/gorm"
)

// ReporterRepresentation is an immutable value object representing reporter-specific resource data.
// It follows DDD principles where value objects are immutable and should be created
// through factory methods that enforce validation rules.
// Note: Fields are exported for GORM compatibility but should not be modified directly.
type ReporterRepresentation struct {
	// Primary key - v7 UUID for time-ordered sorting
	ID uuid.UUID `gorm:"type:text;column:id;primaryKey"`
	// These are the versioned attributes
	Representation
	// Reference to metadata table - managed at application level
	Metadata        *ReporterRepresentationMetadata `gorm:"-"`
	Version         uint                            `gorm:"type:bigint;column:version;index:reporter_rep_unique_idx,unique;check:version >= 0"`
	Generation      uint                            `gorm:"type:bigint;column:generation;index:reporter_rep_unique_idx,unique;check:generation >= 0"`
	CommonVersion   uint                            `gorm:"type:bigint;column:common_version;check:common_version >= 0"`
	Tombstone       bool                            `gorm:"column:tombstone"`
	ReporterVersion *string                         `gorm:"size:128;column:reporter_version"`
}

// BeforeCreate will set a v7 UUID rather than numeric ID.
func (rr *ReporterRepresentation) BeforeCreate(tx *gorm.DB) error {
	if rr.ID == uuid.Nil {
		id, err := uuid.NewV7()
		if err != nil {
			return fmt.Errorf("failed to generate v7 UUID: %w", err)
		}
		rr.ID = id

		// Set the foreign key reference in metadata if it exists
		if rr.Metadata != nil {
			rr.Metadata.ReporterRepresentationID = id
		}
	}
	return nil
}

// NewReporterRepresentation Factory method for creating a new ReporterRepresentation
// This enforces immutability by validating all inputs and creating a valid instance
func NewReporterRepresentation(
	data JsonObject,
	localResourceID string,
	reporterType string,
	resourceType string,
	version uint,
	reporterInstanceID string,
	generation uint,
	apiHref string,
	consoleHref *string,
	commonVersion uint,
	tombstone bool,
	reporterVersion *string,
) (*ReporterRepresentation, error) {
	// Note: ID will be generated by BeforeCreate hook
	metadata := &ReporterRepresentationMetadata{
		ReporterRepresentationKey: ReporterRepresentationKey{
			RepresentationType: RepresentationType{
				ResourceType: resourceType,
				ReporterType: reporterType,
			},
			LocalResourceID:    localResourceID,
			ReporterInstanceID: reporterInstanceID,
		},
		APIHref:     apiHref,
		ConsoleHref: consoleHref,
		// Note: ReporterRepresentationID will be set by BeforeCreate hook
	}

	rr := &ReporterRepresentation{
		// ID will be generated by BeforeCreate hook
		Representation: Representation{
			Data: data,
			RepresentationType: RepresentationType{
				ResourceType: resourceType,
				ReporterType: reporterType,
			},
		},
		Metadata:        metadata,
		Version:         version,
		Generation:      generation,
		CommonVersion:   commonVersion,
		Tombstone:       tombstone,
		ReporterVersion: reporterVersion,
	}

	if err := validateReporterRepresentation(rr); err != nil {
		return nil, err
	}

	return rr, nil
}

// validateReporterRepresentation validates a ReporterRepresentation instance
// This function is used internally by factory methods to ensure consistency
func validateReporterRepresentation(rr *ReporterRepresentation) error {
	if rr.Metadata == nil {
		return ValidationError{Field: "Metadata", Message: "cannot be nil"}
	}
	if rr.Metadata.LocalResourceID == "" || strings.TrimSpace(rr.Metadata.LocalResourceID) == "" {
		return ValidationError{Field: "LocalResourceID", Message: "cannot be empty"}
	}
	if len(rr.Metadata.LocalResourceID) > MaxLocalResourceIDLength {
		return ValidationError{Field: "LocalResourceID", Message: fmt.Sprintf("exceeds maximum length of %d characters", MaxLocalResourceIDLength)}
	}
	if rr.Metadata.ReporterType == "" || strings.TrimSpace(rr.Metadata.ReporterType) == "" {
		return ValidationError{Field: "ReporterType", Message: "cannot be empty"}
	}
	if len(rr.Metadata.ReporterType) > MaxReporterTypeLength {
		return ValidationError{Field: "ReporterType", Message: fmt.Sprintf("exceeds maximum length of %d characters", MaxReporterTypeLength)}
	}
	if rr.Metadata.ResourceType == "" || strings.TrimSpace(rr.Metadata.ResourceType) == "" {
		return ValidationError{Field: "ResourceType", Message: "cannot be empty"}
	}
	if len(rr.Metadata.ResourceType) > MaxResourceTypeLength {
		return ValidationError{Field: "ResourceType", Message: fmt.Sprintf("exceeds maximum length of %d characters", MaxResourceTypeLength)}
	}
	if rr.Metadata.ReporterInstanceID == "" || strings.TrimSpace(rr.Metadata.ReporterInstanceID) == "" {
		return ValidationError{Field: "ReporterInstanceID", Message: "cannot be empty"}
	}
	if len(rr.Metadata.ReporterInstanceID) > MaxReporterInstanceIDLength {
		return ValidationError{Field: "ReporterInstanceID", Message: fmt.Sprintf("exceeds maximum length of %d characters", MaxReporterInstanceIDLength)}
	}
	if rr.Version < MinVersionValue {
		return ValidationError{Field: "Version", Message: fmt.Sprintf("must be >= %d", MinVersionValue)}
	}
	if rr.Generation < MinGenerationValue {
		return ValidationError{Field: "Generation", Message: fmt.Sprintf("must be >= %d", MinGenerationValue)}
	}
	if rr.Metadata.APIHref == "" || strings.TrimSpace(rr.Metadata.APIHref) == "" {
		return ValidationError{Field: "APIHref", Message: "cannot be empty"}
	}
	if len(rr.Metadata.APIHref) > MaxAPIHrefLength {
		return ValidationError{Field: "APIHref", Message: fmt.Sprintf("exceeds maximum length of %d characters", MaxAPIHrefLength)}
	}
	if err := validateURL(rr.Metadata.APIHref); err != nil {
		return ValidationError{Field: "APIHref", Message: err.Error()}
	}
	if rr.Metadata.ConsoleHref != nil && *rr.Metadata.ConsoleHref != "" {
		if len(*rr.Metadata.ConsoleHref) > MaxConsoleHrefLength {
			return ValidationError{Field: "ConsoleHref", Message: fmt.Sprintf("exceeds maximum length of %d characters", MaxConsoleHrefLength)}
		}
		if err := validateURL(*rr.Metadata.ConsoleHref); err != nil {
			return ValidationError{Field: "ConsoleHref", Message: err.Error()}
		}
	}
	if rr.CommonVersion < MinCommonVersion {
		return ValidationError{Field: "CommonVersion", Message: fmt.Sprintf("must be >= %d", MinCommonVersion)}
	}
	if rr.ReporterVersion != nil && len(*rr.ReporterVersion) > MaxReporterVersionLength {
		return ValidationError{Field: "ReporterVersion", Message: fmt.Sprintf("exceeds maximum length of %d characters", MaxReporterVersionLength)}
	}

	return nil
}
