package model

import (
	"fmt"
	"strings"
)

// ReporterResource represents the metadata that identifies a resource as reported by a specific reporter.
// It is version-independent – changes to the representation itself are captured in ReporterRepresentation
// rows that reference this key. A (local_resource_id, reporter_type, resource_type, reporter_instance_id)
// tuple must be unique across the table; we enforce that with a composite unique index.
//
//	id (uuid string)                 – surrogate PK, generated by caller
//	local_resource_id (string)       – reporter-scoped identifier (e.g. host id)
//	resource_type (string)           – domain noun ("host", "k8s_cluster", ...)
//	reporter_type (string)           – e.g. "hbi", "acm"
//	reporter_instance_id (string)    – reporter deployment instance id (e.g. cluster fqdn)
//	api_href / console_href (urls)   – optional URLs back to reporter system
//	version / generation / tombstone – copied from the latest ReporterRepresentation for convenience
//	resource_id (uuid)               – FK to canonical resource row (resource table)
//
// Only the identifying columns participate in the composite unique index.
// The surrogate `ID` column is the single primary key.
type ReporterResource struct {
	ID                 string `gorm:"size:128;column:id;primaryKey"`
	LocalResourceID    string `gorm:"size:128;column:local_resource_id;index:reporter_resource_identifier_idx,unique"`
	ResourceType       string `gorm:"size:128;column:resource_type;index:reporter_resource_identifier_idx,unique"`
	ReporterType       string `gorm:"size:128;column:reporter_type;index:reporter_resource_identifier_idx,unique"`
	ReporterInstanceID string `gorm:"size:128;column:reporter_instance_id;index:reporter_resource_identifier_idx,unique"`

	APIHref     string  `gorm:"size:512;column:api_href"`
	ConsoleHref *string `gorm:"size:512;column:console_href"`

	Version    uint `gorm:"type:bigint;column:version;check:version >= 0"`
	Generation uint `gorm:"type:bigint;column:generation;check:generation >= 0"`
	Tombstone  bool `gorm:"column:tombstone"`

	ResourceID string `gorm:"size:128;column:resource_id;index"` // FK to resource table (uuid as text)
}

func (ReporterResource) TableName() string {
	return ReporterResourceTableName
}

// NewReporterResource validates inputs and returns an immutable ReporterResource value.
func NewReporterResource(
	id string,
	localResourceID string,
	resourceType string,
	reporterType string,
	reporterInstanceID string,
	apiHref string,
	consoleHref *string,
	version uint,
	generation uint,
	tombstone bool,
	resourceID string,
) (*ReporterResource, error) {
	rr := &ReporterResource{
		ID:                 id,
		LocalResourceID:    localResourceID,
		ResourceType:       resourceType,
		ReporterType:       reporterType,
		ReporterInstanceID: reporterInstanceID,
		APIHref:            apiHref,
		ConsoleHref:        consoleHref,
		Version:            version,
		Generation:         generation,
		Tombstone:          tombstone,
		ResourceID:         resourceID,
	}

	if err := validateReporterResource(rr); err != nil {
		return nil, err
	}
	return rr, nil
}

func validateReporterResource(r *ReporterResource) error {
	if r.ID == "" {
		return ValidationError{Field: "ID", Message: "cannot be empty"}
	}

	if strings.TrimSpace(r.LocalResourceID) == "" {
		return ValidationError{Field: "LocalResourceID", Message: "cannot be empty"}
	}
	if len(r.LocalResourceID) > MaxLocalResourceIDLength {
		return ValidationError{Field: "LocalResourceID", Message: fmt.Sprintf("exceeds %d chars", MaxLocalResourceIDLength)}
	}

	if strings.TrimSpace(r.ResourceType) == "" {
		return ValidationError{Field: "ResourceType", Message: "cannot be empty"}
	}
	if len(r.ResourceType) > MaxResourceTypeLength {
		return ValidationError{Field: "ResourceType", Message: fmt.Sprintf("exceeds %d chars", MaxResourceTypeLength)}
	}

	if strings.TrimSpace(r.ReporterType) == "" {
		return ValidationError{Field: "ReporterType", Message: "cannot be empty"}
	}
	if len(r.ReporterType) > MaxReporterTypeLength {
		return ValidationError{Field: "ReporterType", Message: fmt.Sprintf("exceeds %d chars", MaxReporterTypeLength)}
	}

	if strings.TrimSpace(r.ReporterInstanceID) == "" {
		return ValidationError{Field: "ReporterInstanceID", Message: "cannot be empty"}
	}
	if len(r.ReporterInstanceID) > MaxReporterInstanceIDLength {
		return ValidationError{Field: "ReporterInstanceID", Message: fmt.Sprintf("exceeds %d chars", MaxReporterInstanceIDLength)}
	}

	if r.Generation < MinGenerationValue {
		return ValidationError{Field: "Generation", Message: "must be >= 0"}
	}

	if len(r.APIHref) > 0 {
		if len(r.APIHref) > MaxAPIHrefLength {
			return ValidationError{Field: "APIHref", Message: fmt.Sprintf("exceeds %d chars", MaxAPIHrefLength)}
		}
		if err := validateURL(r.APIHref); err != nil {
			return ValidationError{Field: "APIHref", Message: err.Error()}
		}
	}

	if r.ConsoleHref != nil && *r.ConsoleHref != "" {
		if len(*r.ConsoleHref) > MaxConsoleHrefLength {
			return ValidationError{Field: "ConsoleHref", Message: fmt.Sprintf("exceeds %d chars", MaxConsoleHrefLength)}
		}
		if err := validateURL(*r.ConsoleHref); err != nil {
			return ValidationError{Field: "ConsoleHref", Message: err.Error()}
		}
	}

	return nil
}
